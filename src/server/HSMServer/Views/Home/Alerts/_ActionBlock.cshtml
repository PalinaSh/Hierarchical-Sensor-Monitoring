@using HSMSensorDataObjects.SensorRequests
@using HSMServer.Extensions
@using HSMServer.Notifications
@using HSMServer.Model.DataAlerts
@using Microsoft.AspNetCore.Mvc.TagHelpers

@model ActionViewModel

@inject ITelegramChatsManager ChatsManager

@addTagHelper *, Microsoft.AspNetCore.Mvc.TagHelpers


@{
    var action = Model.Action;

    var isSendAction = action == ActionType.SendNotification;
    var isShowAction = action == ActionType.ShowIcon;
    var isScheduleAction = action == ActionType.Schedule;

    var isSecondaryCondition = !Model.IsMain;

    var chats = new List<TelegramChat>();
    if (Model.Node.TryGetChats(out var availableChats))
        foreach (var chat in ChatsManager.GetValues())
        {
            if (availableChats.Contains(chat.Id))
                chats.Add(chat);
        }
}


<div name="alertAction" class="d-flex flex-row align-items-center alert-blocks-group py-1 ms-3">
    <div class="@isSecondaryCondition.ToVisibility() alert-text-block alert-add me-3">and</div>

    <select class="alert-block alert-select property-select" asp-for="Action" asp-items="Model.Actions" disabled="@(Model.IsMain ? true : false)"></select>

    <div name="sendNotificationAction" class="@isSendAction.ToVisibility()">
        <input type="text" class="alert-block target-input target-comment" placeholder="message template" asp-for="Comment" value="@Model.Comment" required="@(isSendAction ? true : false)">
        <div class="alert-text-block operation-select">to</div>
        <select class="selectpicker" name="Chats" multiple
                data-width="100%" data-live-search="true" data-style="alert-block target-input target-multiselect" data-placeholder="telegram chats" data-actions-box="true" data-container="body">
            <option value="@ActionViewModel.AllChatsId" selected="@(Model.Chats?.Contains(ActionViewModel.AllChatsId) ?? true)">All chats</option>

            <option data-divider="true"></option>
            <option disabled>Groups</option>
            @foreach (var chat in chats.GetGroups())
            {
                <option value="@chat.Id" selected="@Model.ChatIsSelected(chat)">@chat.Name</option>
            }

            <option data-divider="true"></option>
            <option disabled>Users</option>
            @foreach (var chat in chats.GetPrivates())
            {
                <option value="@chat.Id" selected="@Model.ChatIsSelected(chat)">@chat.Name</option>
            }
        </select>
    </div>

    <div name="showIconAction" class="@isShowAction.ToVisibility() alert-block">
        <div name="emoji" class="target-input">@Model.Icon</div>
    </div>

    <div name="schedule" class="@isScheduleAction.ToVisibility() align-items-center">
        <input class="me-2" type="datetime-local" id="schedule" asp-for="Schedule.Time" style="flex-shrink: 0.3">
        <div class="alert-text-block operation-select">for repeat</div>
        <select class="alert-block alert-select property-select" asp-for="Schedule.RepeatMode" asp-items="Html.GetEnumSelectList<AlertRepeatMode>()">
        </select>
    </div>

    <a class="deleteAction">
        <i class="@isSecondaryCondition.ToVisibility() fa-solid fa-xmark alert-delete-button"></i>
    </a>
</div>


<script>
    $(document).ready(function () {
        $("select[name='Chats']").selectpicker();

        $("select[name='Chats']").off('changed.bs.select').on('changed.bs.select', function (e, clickedIndex, isSelected, previousValue) {
            let allSelected = true;

            $(this).children().each(function() {
                allSelected &= $(this).is(':selected');
            });
            
            if (allSelected) {
                let $title = $(this).parent().find('.filter-option-inner-inner');
                $title.text("all chats");
            }
        });

        $("div[name='emoji']").emojioneArea({
            filtersPosition: "bottom",
            standalone: true,
            autocomplete: false
        });
    });

    $('select[name="Action"]').off("change").on("change", function () {
        let actionBlock = $(this).parents("div[name='alertAction']:first");

        let send = actionBlock.find($(`div[name='sendNotificationAction']`));
        let show = actionBlock.find($(`div[name='showIconAction']`));
        let schedule = actionBlock.find($(`div[name='schedule']`));

        let commentInput = send.find($(`input[name='Comment']`));

        let action = $(this).val();
        if (action === '@ActionType.SendNotification') {
            show.removeClass("d-flex").addClass('d-none');

            commentInput.attr('required', true);
            send.removeClass("d-none").addClass('d-flex');
            schedule.hide();
        }
        else if (action === '@ActionType.ShowIcon') {
            commentInput.attr('required', false);
            send.removeClass("d-flex").addClass('d-none');

            show.removeClass("d-none").addClass('d-flex');
            schedule.hide();
        }
        else if (action === '@ActionType.SetStatus') {
            commentInput.attr('required', false);
            send.removeClass("d-flex").addClass('d-none');
            show.removeClass("d-flex").addClass('d-none');
            schedule.removeClass("d-flex").addClass('d-none');
        }
        else if (action === '@ActionType.Schedule') {
            send.removeClass("d-flex").addClass('d-none');
            show.removeClass("d-flex").addClass('d-none');
            schedule.removeClass('d-none').addClass("d-flex");
        }
    });

    $("a.deleteAction").off("click").on("click", function () {
        $(this).parents("div[name='alertAction']:first").remove();
    });
</script>