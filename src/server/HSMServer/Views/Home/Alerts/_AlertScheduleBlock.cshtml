@using HSMSensorDataObjects.SensorRequests
@using HSMServer.Extensions
@using HSMServer.Notifications
@using HSMServer.Model.DataAlerts

@model ActionViewModel

@inject ITelegramChatsManager ChatsManager

@addTagHelper *, Microsoft.AspNetCore.Mvc.TagHelpers


@{
    var action = Model.Action;

    var isSendAction = action == ActionType.SendNotification;
    var isShowAction = action == ActionType.ShowIcon;

    var isSecondaryCondition = !Model.IsMain;

    var chats = new List<TelegramChat>();
    if (Model.Node.TryGetChats(out var availableChats))
        foreach (var chat in ChatsManager.GetValues())
        {
            if (availableChats.Contains(chat.Id))
                chats.Add(chat);
        }
}


<div name="alertAction" class="d-flex flex-row align-items-center alert-blocks-group py-1 ms-3">
    <div class="@isSecondaryCondition.ToVisibility() alert-text-block alert-add-schedule-button me-3"> and schedule on</div>
    <div name="sendNotificationAction" class="@isSendAction.ToVisibility()">
        <input class="me-2" type="datetime-local" id="schedule" asp-for="Schedule.Time" style="flex-shrink: 0.3">
        <div class="alert-text-block operation-select">for repeat</div>
        <select class="alert-block alert-select property-select" asp-for="Schedule.RepeatMode" class="form-control" asp-items="Html.GetEnumSelectList<AlertRepeatMode>()">
        </select>
    </div>

    <a class="deleteAction"><i class="@isSecondaryCondition.ToVisibility() fa-solid fa-xmark alert-delete-button"></i></a>
</div>


<script>
    $('select[name="Action"]').off("change").on("change", function () {
        let actionBlock = $(this).parents("div[name='alertAction']:first");

        let send = actionBlock.find($(`div[name='sendNotificationAction']`));
        let show = actionBlock.find($(`div[name='showIconAction']`));

        let commentInput = send.find($(`input[name='Comment']`));

        let action = $(this).val();
        if (action === '@ActionType.SendNotification') {
            show.removeClass("d-flex").addClass('d-none');

            commentInput.attr('required', true);
            send.removeClass("d-none").addClass('d-flex');
        }
        else if (action === '@ActionType.ShowIcon') {
            commentInput.attr('required', false);
            send.removeClass("d-flex").addClass('d-none');

            show.removeClass("d-none").addClass('d-flex');
        }
        else if (action === '@ActionType.SetStatus') {
            commentInput.attr('required', false);
            send.removeClass("d-flex").addClass('d-none');
            show.removeClass("d-flex").addClass('d-none');
        }
    });

    $("a.deleteAction").off("click").on("click", function () {
        $(this).parents("div[name='alertAction']:first").remove();
    });
</script>
