@using HSMServer.Controllers
@using System.Text.Json
@using HSMServer.JsonConverters
@using Microsoft.AspNetCore.Mvc.TagHelpers

@model HSMServer.Model.Dashboards.PanelViewModel

@addTagHelper *, Microsoft.AspNetCore.Mvc.TagHelpers

@{
    ViewData["Title"] = "Dashboard";
    Layout = "~/Views/Tree/_Layout.cshtml";
    var jsonOptions = new JsonSerializerOptions()
    {
        PropertyNamingPolicy = JsonNamingPolicy.CamelCase,
        Converters = { new PlotlyDoubleConverter() }
    };
}


<div class="w-100 overflow-y-auto p-2">
    <div id="panelSettings" class="my-2">
        <div id="editablePanelSettings" class="my-2">
            <form method="post" asp-action="@nameof(DashboardsController.SaveDashboardPanel)" asp-route-dashboardId="@Model.DashboardId" asp-route-panelId="@Model.Id">
                <div class="d-flex justify-content-between mb-1">
                    <div class="d-flex align-items-center flex-grow-1">
                        <label asp-for="Name" class="me-2"></label>
                        <input class="form-control" required maxlength="30" asp-for="Name" placeholder="@nameof(Model.Name)"/>
                    </div>

                    <button type="submit" class="btn btn-primary independentSizeButton ms-2">Save</button>
                </div>

                <textarea id='description' maxlength="250" class="form-control w-100" type='text' asp-for="Description" placeholder="@nameof(Model.Description)"></textarea>

                <div class="d-flex">
                    <div class="form-control w-auto d-flex no-border align-items-center">
                        <div id="autoscale-range" class="d-flex no-border align-items-center @(Model.Settings.RangeSettings.AutoScale ? "disabled-group" : "")">
                            <span>Y axis:</span>

                            <label class="form-check-label w-auto ms-2" asp-for="Settings.RangeSettings.MinY"></label>
                            <input type="number" step="any" asp-for="Settings.RangeSettings.MinY" class="form-control form-control-sm ms-1" style="flex: 0 0 content; max-width: 7rem"/>

                            <label class="form-check-label w-auto ms-2" asp-for="Settings.RangeSettings.MaxY"></label>
                            <input type="number" step="any" asp-for="Settings.RangeSettings.MaxY" class="form-control form-control-sm ms-1" style="flex: 0 0 content; max-width: 7rem"/>
                        </div>
                       
                        <input id="autoscale" class="form-check-input mx-1" asp-for="Settings.RangeSettings.AutoScale" type="checkbox"/>
                        <label class="form-check-label" asp-for="Settings.RangeSettings.AutoScale"></label>
                    </div>
                    <div class="d-flex flex-row align-items-center justify-content-end mt-2 flex-grow-1">
                        <div class="form-check">
                            <input type="checkbox" asp-for="AggregateValues" class="form-check-input"/>
                            <label class="form-check-label" asp-for="AggregateValues"></label>
                        </div>
                        <i class='fas fa-question-circle ms-1' title='If the setting is checked, the requested period will be divided into 100 equal sections and an aggregate point will be created for each subsection. The aggregation function depends on the source property. If source property is Min then aggregation function is Min(el1, el2). For source properties Max and Count the aggregation function is Max(el1, el2) and for Mean, Value and EMA (all) the function is Mean(el1, el2).'></i>

                        <div class="form-check ms-4">
                            <input type="checkbox" asp-for="ShowProduct" class="form-check-input" onchange="javascript:showProductInLabels()"/>
                            <label class="form-check-label" asp-for="ShowProduct"></label>
                        </div>
                    </div>
                </div>
            </form>
        </div>
    </div>

    <div class="dropzone" style="max-width: 98%;min-width: 100%; width: 100%!important;">
        <span id="emptypanel" style="font-size: larger; position: fixed; z-index: 300; transform: translate(100px, 100px); color: rgb(128,128,128); display: none">Empty panel</span>
        <div id="multichart"></div>
    </div>

    <div class="d-flex align-items-center">
        <label class="col-form-label fw-bold">Templates:</label>
        <a href="javascript:addTemplate();" class="mx-2">
            <i class="fa-solid fa-plus"></i> Add
        </a>
    </div>
    <div id="templates"></div>

    <label class="col-form-label fw-bold">Sources:</label>
    <div id="plots" class="mt-1">
        <ul id="sources" class="list-group">
        </ul>
    </div>

    <div class="d-flex justify-content-center mt-2" style="color: grey; font-size: larger">
        <span>Drag and drop sensor to the plot above</span>
    </div>
</div>


<script>
    $(document).ready(function () {
        let values = @Html.Raw(JsonSerializer.Serialize(Model.Sources.Values, jsonOptions))
        let settings = @Html.Raw(JsonSerializer.Serialize(Model.Settings, jsonOptions));
        let range = settings.rangeSettings.autoScale === true ? true : [Number(settings.rangeSettings.minY), Number(settings.rangeSettings.maxY)];

        initMultichart('multichart', 300, true, true).then(
            (dom) => {
                values.forEach(function (x) {
                    addNewSourceHtml(x, 'multichart', range);
                })

                $('#multichart').on('plotly_relayout', function (e, updateData){
                    let rect = e.target.getBoundingClientRect();
                    let emptypanel = $('#emptypanel');
                    emptypanel.css('transform', `translate(${rect.width / 2 - emptypanel .width() / 2}px, ${rect.height / 2}px)`)
                })

                if (values.length === 0) {
                    $('#emptypanel').show();
                }

                window.dispatchEvent(new Event('resize'));
            }
        );

        $('#editablePanelSettings form').on('submit', function (event){
            event.preventDefault();
            event.stopImmediatePropagation();

            $.ajax({
                type: 'post',
                url: $(this).attr("action"),
                data: new FormData(this),
                datatype: 'html',
                processData: false,
                contentType: false,
                cache: false,
                async: true
            }).done(function(id){
                window.location.href = `/Dashboards/${id}`;
            }).fail(function (response){
                showToast(response.responseText);
            })
        })
    })
    
    $('#autoscale').on('change', function (){
        if ($(this).is(':checked'))
            $('#autoscale-range').addClass('disabled-group')
        else
            $('#autoscale-range').removeClass('disabled-group')
    })
    
    $('#multichart').on('plotly_legendclick', function (data){
        return false;
    })

    function showProductInLabels() {
        $('#sources li').each(function (idx, li) {
            let source = $(li);

            let idAttr = source.attr('id');
            let sourceId = idAttr.substring('source_'.length, idAttr.length);

            if ($(`input[name='ShowProduct']`).is(':checked'))
                $(`#productName_${sourceId}`).removeClass('d-none');
            else
                $(`#productName_${sourceId}`).addClass('d-none');

            realtimeUpdate(sourceId);
        });
    }

    function addTemplate() {
        $.ajax({
            url: `@Url.Action(nameof(DashboardsController.AddTemplate))`,
            cache: false
        }).done(function (viewData) {
            $(`#templates`).append(viewData);
        });
    }
</script>