@using HSMServer.Controllers
@using HSMServer.Model.TreeViewModel

@model TreeViewModel

@addTagHelper *, Microsoft.AspNetCore.Mvc.TagHelpers

@{
    ViewData["Title"] = "Dashboard";
    Layout = "~/Views/Tree/_Layout.cshtml";
}
<script>
    var sourceLink = '@Url.Action(nameof(DashboardsController.GetSource))';
</script>

<div class="w-100 overflow-y-auto">
    <div id="plot" class="w-75 h-75 dropzone"></div>
    @(await Html.PartialAsync("Source/Sources"))
</div>


<script>
    $(document).ready(function (){
        var plots = $('#plot');
        
        Plotly.newPlot('plot', [], {})
         
        $('[id^="source"]').on('input', '.form-control-color', function () {
            $(this).attr('value', this.value);
            let id = this.id.substring("color_".length, this.id.length);
            let foundId = getId(id)

            let update = {
                'line.color' :  $(this).val()
            }

            if (foundId !== undefined)
                Plotly.restyle('plot', update, foundId)
        })
        .on('click', 'button',function (){
             let id = this.id.substring("deletePlot_".length, this.id.length);
             let foundId = getId(id)
             if (foundId !== undefined) {
                Plotly.deleteTraces('plot', foundId)
                $('[id^="source"] li')[foundId].remove();
             }
        })
        
        function getId(id){
            let foundId = undefined;
            for(let i = 0; i < plots[0].data.length; i++){
                if (plots[0].data[i].name === id){
                    foundId = i;
                    break;
                }
            }
            
            return foundId;
        }
    })
    
       
</script>